#!/usr/bin/env node

const app = require('../index')
const http = require('http')

const { healthCheck: dbHealthCheck } = require('../service/database-connection')
const log = require('pino')()

/**
 * Get port from environment and store in Express.
 */

const port = normalizePort(process.env.PORT || '5000')
app.set('port', port)

/**
 * Create HTTP server.
 */

const server = http.createServer(app)

/**
 * Run certain logic before starting the server
 */
async function startup () {
  // verify database connection
  await dbHealthCheck()
    .then(_ => log.info('successfully made connection to the database'))
    .catch(err => {
      log.error({ err }, 'failed to connect to database')
      // throw error back up to cancel startup
      throw err
    })
}

startup()
  .then(_ => {
    /**
     * Listen on provided port, on all network interfaces.
     */

    server.listen(port)
    server.on('error', onError)
    server.on('listening', onListening)
  })
  .catch(err => {
    log.error(err, 'failed to run startup actions, closing service')
    process.exit(1)
  })

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort (val) {
  const port = parseInt(val, 10)

  if (isNaN(port)) return val

  if (port >= 0) return port

  return false
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError (error) {
  if (error.syscall !== 'listen') throw error

  const bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      log.error(bind + ' requires elevated privileges')
      process.exit(1)
    case 'EADDRINUSE':
      log.error(bind + ' is already in use')
      process.exit(1)
    default:
      throw error
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening () {
  const addr = server.address()
  const bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port
  log.debug('Listening on ' + bind)
  log.info('Listening on ' + bind)
}
